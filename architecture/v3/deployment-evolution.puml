@startuml License Plate Reader Deployment v3
!theme blueprint
title LPR System Deployment v3: Mobile Prototype ‚Üí Production CCTV

!define CURRENT_COLOR #10b981
!define FUTURE_COLOR #3b82f6
!define MIGRATION_COLOR #f59e0b

' Current Mobile Implementation
package "üèÉ‚Äç‚ôÇÔ∏è Current Deployment (September 12, 2025)" as current_impl <<CURRENT_COLOR>> {
    
    node "üíª Development Server" as dev_server {
        component "Next.js Dev\n:3000" as nextjs_dev
        component "FastAPI Server\n:8000" as fastapi_current
        component "Ngrok Tunnel" as ngrok_current
    }
    
    cloud "üì± Mobile Testing" as mobile_testing {
        component "iOS Safari" as ios_current
        component "Android Chrome" as android_current
    }
    
    storage "üß† Models" as models_current {
        artifact "yolov8x.pt" as yolo_model
        artifact "PaddleOCR" as paddle_model
    }
}

' Migration Phase
package "üîÑ Migration Deployment (Next Sprint)" as migration_phase <<MIGRATION_COLOR>> {
    
    node "üñ•Ô∏è Production Server" as prod_server {
        component "Next.js Build\n:3000" as nextjs_prod
        component "FastAPI Production\n:8000" as fastapi_prod
        component "Nginx Reverse Proxy\n:80/443" as nginx_proxy
    }
    
    node "üé• RTSP Integration" as rtsp_integration {
        component "IP Camera Handler" as ip_camera_handler
        component "Stream Multiplexer" as stream_mux
        component "Frame Extractor" as frame_extractor
    }
    
    database "üóÑÔ∏è Database Layer" as db_layer {
        component "PostgreSQL\nMain DB" as postgres
        component "Redis Cache\nReal-time" as redis
        component "InfluxDB\nTime-series" as influx
    }
}

' Future CCTV Production
package "üè≠ Production CCTV Deployment (Future)" as production_cctv <<FUTURE_COLOR>> {
    
    node "üéõÔ∏è Control Center" as control_center {
        component "Multi-Camera Dashboard" as dashboard
        component "Alert Management" as alert_mgmt
        component "User Management" as user_mgmt
        component "Analytics Engine" as analytics
    }
    
    node "üì° Camera Network" as camera_network {
        component "IP Camera 1\nEntrance" as cam1
        component "IP Camera 2\nExit" as cam2  
        component "IP Camera 3\nParking" as cam3
        component "IP Camera N\n..." as camN
    }
    
    node "‚ö° High-Performance Processing" as hp_processing {
        component "GPU Cluster\nYOLO Inference" as gpu_cluster
        component "Load Balancer\nRequest Distribution" as load_balancer
        component "Queue Manager\nAsyncio Tasks" as queue_mgr
    }
    
    storage "üìä Data Storage" as data_storage {
        artifact "Detected Plates\nHistory" as plates_history
        artifact "Vehicle Images\nArchive" as images_archive
        artifact "Analytics Data\nReports" as analytics_data
    }
}

' Deployment Arrows
current_impl -down-> migration_phase : "üöÄ Phase 1\nProduction Setup"
migration_phase -down-> production_cctv : "üè≠ Phase 2\nScale to CCTV"

' Current System Details
nextjs_dev --> fastapi_current : "API Calls"
fastapi_current --> yolo_model : "Local Inference"
fastapi_current --> paddle_model : "OCR Processing"
ngrok_current --> nextjs_dev : "Public Access"
mobile_testing --> ngrok_current : "HTTPS"

' Migration Connections  
nextjs_prod --> fastapi_prod : "Internal API"
nginx_proxy --> nextjs_prod : "Reverse Proxy"
ip_camera_handler --> stream_mux : "RTSP Streams"
frame_extractor --> fastapi_prod : "Frame Processing"
fastapi_prod --> postgres : "Store Results"
fastapi_prod --> redis : "Cache Layer"
analytics --> influx : "Metrics Data"

' Production Connections
dashboard --> alert_mgmt : "Real-time Updates"
cam1 --> load_balancer : "RTSP Stream"
cam2 --> load_balancer : "RTSP Stream" 
cam3 --> load_balancer : "RTSP Stream"
camN --> load_balancer : "RTSP Stream"
load_balancer --> gpu_cluster : "Distribute Load"
queue_mgr --> gpu_cluster : "Process Queue"
gpu_cluster --> plates_history : "Store Detections"
analytics --> analytics_data : "Generate Reports"

' Implementation Notes
note top of current_impl
  **‚úÖ CURRENT DEPLOYMENT:**
  ‚Ä¢ Mobile web interface
  ‚Ä¢ Real-time camera capture
  ‚Ä¢ YOLO + Roboflow detection
  ‚Ä¢ OCR text extraction
  ‚Ä¢ Live CCTV mode prototype
  ‚Ä¢ Comprehensive error handling
end note

note top of migration_phase
  **üîÑ NEXT DEPLOYMENT:**
  ‚Ä¢ Production deployment setup
  ‚Ä¢ Replace mobile camera with RTSP
  ‚Ä¢ Database integration
  ‚Ä¢ Multi-camera support
  ‚Ä¢ Performance optimization
end note

note top of production_cctv
  **üè≠ FULL PRODUCTION DEPLOYMENT:**
  ‚Ä¢ 24/7 operation capability
  ‚Ä¢ Multi-camera dashboard
  ‚Ä¢ Real-time alerting system
  ‚Ä¢ Advanced analytics
  ‚Ä¢ User access control
  ‚Ä¢ Scalable architecture
end note

' Technical Specifications
note bottom of current_impl
  **Current Tech Stack:**
  ‚Ä¢ Next.js 15 + TypeScript
  ‚Ä¢ FastAPI with Swagger docs  
  ‚Ä¢ YOLOv8x.pt (CPU-only)
  ‚Ä¢ PaddleOCR engine
  ‚Ä¢ Ngrok for external access
  ‚Ä¢ 85%+ detection accuracy
  ‚Ä¢ <2 second response time
end note

note bottom of production_cctv
  **Production Requirements:**
  ‚Ä¢ 99.9% uptime
  ‚Ä¢ <500ms detection time
  ‚Ä¢ Support 50+ cameras
  ‚Ä¢ 10,000+ plates/day capacity
  ‚Ä¢ Real-time alerting (<1s)
  ‚Ä¢ Full audit trail
  ‚Ä¢ Scalable to multiple sites
end note

@enduml
