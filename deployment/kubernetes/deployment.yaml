apiVersion: apps/v1
kind: Deployment
metadata:
  name: lpr-app
  labels:
    app: lpr-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: lpr-app
  template:
    metadata:
      labels:
        app: lpr-app
    spec:
      containers:
      - name: lpr-app
        image: lpr-app:latest
        ports:
        - containerPort: 8000
        env:
        - name: DB_HOST
          value: "postgres-service"
        - name: REDIS_HOST
          value: "redis-service"
        - name: ROBOFLOW_API_KEY
          valueFrom:
            secretKeyRef:
              name: lpr-secrets
              key: roboflow-api-key
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lpr-secrets
              key: db-password
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: models-volume
          mountPath: /app/models
        - name: outputs-volume
          mountPath: /app/outputs
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: lpr-data-pvc
      - name: models-volume
        persistentVolumeClaim:
          claimName: lpr-models-pvc
      - name: outputs-volume
        persistentVolumeClaim:
          claimName: lpr-outputs-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: lpr-app-service
spec:
  selector:
    app: lpr-app
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "lpr_database"
        - name: POSTGRES_USER
          value: "lpr_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lpr-secrets
              key: db-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server"]
        args: ["--requirepass", "$(REDIS_PASSWORD)"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lpr-secrets
              key: redis-password
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: lpr-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: lpr.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: lpr-app-service
            port:
              number: 8000