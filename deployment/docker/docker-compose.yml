version: '3.8'

services:
  # Main LPR Application
  lpr-app:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: lpr-app
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - ROBOFLOW_API_KEY=${ROBOFLOW_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ../../data:/app/data
      - ../../models:/app/models
      - ../../outputs:/app/outputs
      - ../../config:/app/config
    depends_on:
      - postgres
      - redis
    networks:
      - lpr-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lpr-postgres
    environment:
      - POSTGRES_DB=lpr_database
      - POSTGRES_USER=lpr_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-lpr_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../database/schemas/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - lpr-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lpr-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lpr-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: lpr-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ../../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - lpr-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: lpr-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ../../monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - lpr-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # InfluxDB for time-series data
  influxdb:
    image: influxdb:2.7-alpine
    container_name: lpr-influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PASSWORD:-influxdb_password}
      - DOCKER_INFLUXDB_INIT_ORG=lpr_org
      - DOCKER_INFLUXDB_INIT_BUCKET=lpr_analytics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_TOKEN:-lpr_token}
    ports:
      - "8086:8086"
    volumes:
      - influx_data:/var/lib/influxdb2
    networks:
      - lpr-network
    restart: unless-stopped

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lpr-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../../deployment/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - lpr-app
    networks:
      - lpr-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  influx_data:

networks:
  lpr-network:
    driver: bridge